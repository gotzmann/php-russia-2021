<?phpdeclare(strict_types=1);use App\Handlers\Handler;require_once __DIR__ . '/vendor/autoload.php';$server = new Swoole\HTTP\Server("0.0.0.0", 80);$server->set([    'worker_num' => 4,      // The number of worker processes to start    'task_worker_num' => 4, // The amount of task workers to start    'backlog' => 128,       // TCP backlog connection number]);$server->on('Request', 'App\Handlers\Handler::process');//$server->on('Request', Handler::__invoke);$server->on('Task', function (Swoole\Server $server, $task_id, $reactorId, $data){    echo "Task Worker Process received data";    echo "#{$server->worker_id}\tonTask: [PID={$server->worker_pid}]: task_id=$task_id, data_len=" . strlen($data) . "." . PHP_EOL;    $server->finish($data);});$server->start();// The main HTTP server request callback event, entry point for all incoming HTTP requests/////$server->on('Request', function(Swoole\HTTP\Request $request, Swoole\HTTP\Response $response)/////{/////    $response->end('<h1>Hello World!</h1>');/////});// Triggered when new worker processes starts//$server->on("WorkerStart", function($server, $workerId)//{// ...//});// Triggered when the HTTP Server starts, connections are accepted after this callback is executed//$server->on("Start", function($server, $workerId)//{// ...//});// Triggered when the server is shutting down//$server->on("Shutdown", function($server, $workerId)//{// ...//});// Triggered when worker processes are being stopped//$server->on("WorkerStop", function($server, $workerId)//{// ...//});